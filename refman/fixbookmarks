#!/usr/bin/env perl
#------------------------------------------------------------------------------
# Fix bookmarks generated by the hyperref package so that they can
# be included in a PDF index. This script is implicitly used by
# ``make pdf''.
#
# afb 4/2002
#------------------------------------------------------------------------------
# $Id: fixbookmarks,v 1.3 2003/05/06 08:28:50 borchert Exp $
#------------------------------------------------------------------------------
# $Log: fixbookmarks,v $
# Revision 1.3  2003/05/06 08:28:50  borchert
# German sz ligatures in titles were accidently converted to a simple s
#
# Revision 1.2  2002/10/16 15:45:06  borchert
# support of German umlauts added
#
# Revision 1.1  2002/04/07 16:13:55  borchert
# Initial revision
#
#------------------------------------------------------------------------------

use strict;
use warnings;
use Fcntl;
use IO::File;

my $cmdname = $0; $cmdname =~ s{.*/}{};
my $usage = "Usage: $cmdname [document]\n";
die $usage if @ARGV > 1;
my $document = "main";
if (@ARGV > 0) {
   $document = shift;
}
my $bookmarks = "$document.out";
my $texfile = "$document.tex";

my $in = new IO::File $bookmarks
   or die "$cmdname: unable to open $bookmarks for reading: $!\n";

my @roman_numbers = (
   "0", "I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X",
        "XI", "XII", "XIII", "XIV", "XV", "XVI", "XVIII", "IXX", "XX",
);

my @greek = qw(alpha beta gamma delta epsilon varepsilon zeta eta
   theta vartheta iota kappa lambda mu nu xi o pi varpi rho varrho
   sigma varsigma tau upsilon phi varphi chi psi omega
   Gamma Delta Theta Lambda Xi Pi Sigma Upsilon Phi Psi Omega);

my %umlaut = (
   a => "ä", A => "Ä",
   o => "ö", O => "Ö",
   u => "ü", U => "Ü",
   s => "ß",
);

my %macros = (
   TeX => "TeX",
   LaTeX => "LaTeX",
   MF => "METAFONT",
   MP => "METAPOST",
);

sub titlename {
   my $name = shift;
   $name =~ s{^var}{};
   return ucfirst $name;
}
my %greek = map { $_, titlename($_) } @greek;

my @pages = ();
foreach my $file (infiles()) {
   push(@pages, process($file));
}

my @bookmarks = (); my $prev_text; my $page;
while (<$in>) {
   chomp;
   exit 0 if m{\\let\\WriteBookmarks\\relax};
   my ($level, $options, $label, $text, $uplevel) =
   m{
      ^\\
      BOOKMARK
      \s+
      \[(\-?\d+)\]	# ---> $level
      \[(.*?)\]		# ---> $options
      \{(.*?)\}		# ---> $label
      \{(.*?)\}		# ---> $text
      \{(.*?)\}		# ---> $uplevel
      (?:\s*%.*)	# ---> optional comment
      $
   }x;
   my $consume_page;
   next if $level < 0; # skip parts
   next if $label =~ m{\*}; # skip faked sections
   die "Bad line: $_\n" unless defined $text;
   if (defined $prev_text) {
      if ($text ne $prev_text) {
	 $consume_page = 1;
      } elsif (@pages == 0 || defined $pages[0] && !$pages[0]->{duplicate}) {
	 $consume_page = 0;
      } else {
	 $consume_page = 1;
      }
   } else {
      $consume_page = 1;
   }
   if ($consume_page) {
      die "$cmdname: bookmark file is out of sync with LaTeX source\n"
	 if @pages == 0;
      $page = shift @pages;
   }
   push(@bookmarks, {
      level => $level,
      options => $options,
      label => $label,
      text => $page->{title},
      uplevel => $uplevel,
   });
   $prev_text = $text;
}
$in->close;

my $tmpfile = $bookmarks . ".TMP";
my $out = new IO::File $tmpfile, O_CREAT|O_EXCL|O_WRONLY
   or die "$cmdname: unable to create $tmpfile: $!\n";
select($out);
print q{\let\WriteBookmarks\relax}, "\n";

my $lasttitle = ""; my $number = 0;
foreach my $bookmark (@bookmarks) {
   if ($lasttitle eq $bookmark->{text}) {
      $bookmark->{text} .= " " . $roman_numbers[$number];
      ++$number;
   } else {
      $number = 2; $lasttitle = $bookmark->{text};
   }

   # process bold and italic stuff
   $bookmark->{text} =~
   s{
      \{
      \\
      (?:it|bf|tt)
      \s+
      (.*?)
      \}
   }{
      $1
   }xge;

   # process \keyword{...}, \ident{...} etc.
   $bookmark->{text} =~
   s{
      \\
      (?:keyword|ident)
      \{
      (.*?)
      \}
   }{
      $1
   }xge;

   # process macros like \TeX, \LaTeX etc.
   $bookmark->{text} =~
   s{
      \\
      ([A-Za-z]+)
      \{\}
   }{
      defined($macros{$1})?
	 $macros{$1}
      :
	 $1
   }xge;

   # process German umlauts
   $bookmark->{text} =~
   s{
      \"
      ([aousAOU])
   }{
      $umlaut{$1}
   }xge;

   # process math mode in titles
   $bookmark->{text} =~
   s{
      \$(.*?)\$
   }{
      process_math($1)
   }xge;

   print
      q(\BOOKMARK [),
	 $bookmark->{level},
      q(][),
	 $bookmark->{options},
      q(]{),
	 $bookmark->{label},
      q(}{),
	 $bookmark->{text},
      q(}{),
	 $bookmark->{uplevel},
      q(}),
      "\n";
}
$out->close;

unlink($bookmarks);
rename($tmpfile, $bookmarks)
  or die "$cmdname: unable to rename $tmpfile to $bookmarks\n";

sub process_math {
   my $text = shift;
   return $text unless $text =~ m{\\};
   if ($text =~ m{^\\([A-Za-z]+)$}) {
      if (defined $greek{$1}) {
	 return $greek{$1};
      }
   }
   die "$cmdname: do not know yet how to handle $text in math mode\n";
}

#------------------------------------------------------------------------------
# return set of files to be processed in the correct order
#------------------------------------------------------------------------------
sub infiles {
   my $index = new IO::File $texfile
      or die "Unable to open $texfile\n";
   my @files = ();
   while (<$index>) {
      chomp;
      next unless /^\s*\\include\{(.*)\}$/;
      next if $1 eq "macros";
      push(@files, "$1.tex");
   }
   $index->close;
   return @files;
}

#------------------------------------------------------------------------------
# process a single file and return a list of headers
#------------------------------------------------------------------------------
sub process {
   my $infile = shift;
   my $fh = new IO::File $infile;
   my @pages = (); my $last_title;
   while (<$fh>) {
      chomp;
      next if /^%/;
      next if /^\s*$/;
      s{\\index\{.*?\}}{}g;
      s{\\label\{.*?\}}{}g;
      if (/\\(chapter|section|subsection|subsubsection){(.*)}/) {
	 my $level = $1;
	 my $title = $2;
	 $title =~ s/\\\\//g;
	 my $duplicate = defined $last_title && $title eq $last_title;
	 push(@pages, {level => $level, title => $title,
	    duplicate => $duplicate});
	 $last_title = $title;
      }
   }
   $fh->close;
   return @pages;
}
